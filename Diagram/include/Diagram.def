definition
module Common

exports

  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9\_]* -> ID
    "-"? [0-9]+            -> INT
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
    
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]

module Diagram

imports Common

exports

  lexical syntax
    [a-zA-Z] TextChar*              -> Text
    [a-zA-Z0-9\_\ \!]               -> TextChar
    NameChar+                       -> Name
    [\<\>\+\-]                      -> NameChar
    TextChar                        -> NameChar

  lexical restrictions
    Text                            -/- [a-zA-Z0-9\_\ ]

  context-free start-symbols
    Start

  context-free syntax
  
    Line*                           -> Start {cons("Diagram")}
    Line "," Line                   -> Line {cons("MultiLine")}

    Relation                        -> Line {cons("RelationLine")}
    Definition                      -> Line {cons("DefinitionLine")}
    Definition "^" Definition       -> Relation {cons("Inheretance")}

    LHS Indicator RHS               -> Relation {cons("Relation")}
    Definition Attribute*           -> LHS {cons("LHS")}
    Attribute* Definition           -> RHS {cons("RHS")}

    Note                            -> Attribute
    Cardinality                     -> Attribute
    Aggregation                     -> Attribute
    LeftDirectional                 -> Attribute

    "<>"                            -> Attribute {cons("Aggregation")}
    "++"                            -> Attribute {cons("Composition")}
    ">"                             -> Attribute {cons("RightDirectional")}
    "^"                             -> Attribute {cons("Inheretance")}

    "<"                             -> LeftDirectional {cons("LeftDirectional")}
    "+"                             -> Aggregation {cons("Aggregation")}

    "-"                             -> Indicator {cons("Line")}
    "-.-"                           -> Indicator {cons("DottedLine")}

    "[" Pair DefinitionAttrs "]"                -> Definition {cons("Label")}
    "[" ClassDefinition DefinitionAttrs "]"     -> Definition {cons("Definition")}

%% Alternative to allow freeform ClassDefinition
%% Not used since it would make rewriting harder later on,
%% and it's not very useful anyway 

%%    "[" Name LooseDefinitions "]"   -> Definition {cons("FreeformClass")}
%%    LooseDefinition+                -> LooseDefinitions {cons("Loose")}
%%    Properties                      -> LooseDefinition  {cons("Property")}
%%    "|"                             -> LooseDefinition  {cons("Pipe")}

    Name                            -> ClassDefinition {cons("EmptyClass")}
    Name "|" Properties             -> ClassDefinition {cons("Class")}
    Name "|" Properties "|" Methods -> ClassDefinition {cons("FullClass")}

    {Property ";"}*                 -> Properties {cons("Properties")}
    {Method ";"}*                   -> Methods {cons("Methods")}

                                    -> DefinitionAttrs {cons("NoAttrs")}
    "{" {Pair ";"}* "}"             -> DefinitionAttrs {cons("DefinitionAttrs")}

    Name                            -> Property {cons("Property")}
    Name "(" FunctionArgs ")"       -> Method {cons("Method")}

    Text                            -> Note  {cons("Note")}

    {Pair ","}*                     -> FunctionArgs {cons("FunctionArgs")}

    Text ":" Text                   -> Pair {cons("Pair")}

    INT                             -> Cardinality {cons("SetCardinality")}
    INT ".." INT                    -> Cardinality {cons("RangedCardinality")}
    INT ".." "*"                    -> Cardinality {cons("ToAnyCardinality")}
    "*"                             -> Cardinality {cons("AnyCardinality")}
    
  context-free restrictions
  	  
      Cardinality                   -/- [\.]
      Aggregation                   -/- [\+]
      LeftDirectional               -/- [\>]