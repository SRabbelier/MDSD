module Diagram

signature
  constructors
    AnyCardinality    : Cardinality
    ToAnyCardinality  : INT -> Cardinality
    RangedCardinality : INT * INT -> Cardinality
    SetCardinality    : INT -> Cardinality
    Pair              : Text * Text -> Pair
    FunctionArgs      : List(Pair) -> FunctionArgs
    Note              : Text -> Note
    Method            : Name * FunctionArgs -> Method
    Property          : Name -> Property
    DefinitionAttrs   : List(Pair) -> DefinitionAttrs
    NoAttrs           : DefinitionAttrs
    Methods           : List(Method) -> Methods
    Properties        : List(Property) -> Properties
    FullClass         : Name * Properties * Methods -> ClassDefinition
    Class             : Name * Properties -> ClassDefinition
    EmptyClass        : Name -> ClassDefinition
    Definition        : ClassDefinition * DefinitionAttrs -> Definition
    Label             : Pair * DefinitionAttrs -> Definition
    DottedLine        : Indicator
    Line              : Indicator
    Aggregation       : Aggregation
    LeftDirectional   : LeftDirectional
    Inheretance       : Attribute
    RightDirectional  : Attribute
    Composition       : Attribute
    Aggregation       : Attribute
                      : LeftDirectional -> Attribute
                      : Aggregation -> Attribute
                      : Cardinality -> Attribute
                      : Note -> Attribute
    RHS               : List(Attribute) * Definition -> RHS
    LHS               : Definition * List(Attribute) -> LHS
    Relation          : LHS * Indicator * RHS -> Relation
    Inheretance       : Definition * Definition -> Relation
    DefinitionLine    : Definition -> Line
    RelationLine      : Relation -> Line
    MultiLine         : Line * Line -> Line
    Diagram           : List(Line) -> Start
                      : String -> Name
                      : String -> Text
                      : String -> INT


signature
  constructors
    Some : a -> Option(a)
    None : Option(a)


signature
  constructors
    Cons : a * List(a) -> List(a)
    Nil  : List(a)
    Conc : List(a) * List(a) -> List(a)
