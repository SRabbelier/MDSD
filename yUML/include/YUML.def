definition
module Common

exports

  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9\_]* -> ID
    "-"? [0-9]+            -> INT
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
    
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]

module YUML

imports Common

exports

  context-free start-symbols
    Start

  context-free syntax
  
    "module" ID Definition*         -> Start {cons("Module")}

    "entity" ID Inherits "{" Property* "}" -> Definition {cons("Entity")}

    ":" {ID ","}+                   -> Inherits {cons("Inherits")}
    % epsilon %                     -> Inherits {cons("InheritsNone")}

%% Might want to add Attributes to the other Properties as well
    ID "::" Type                    -> Property {cons("Property")}
    ID "<>" Type                    -> Property {cons("CompositeProperty")}
    ID "->" Type Attributes         -> Property {cons("ReferenceProperty")}

    "(" {Attribute ","}+ ")"        -> Attributes {cons("Attributes")}
    % epsilon %                     -> Attributes {cons("NoAttributes")}

%% Not used, but could be added for 'id' support etc
%%    ID                              -> Attribute {cons("MarkerAttribute")}
%%    ID "=" ID                       -> Attribute {cons("ValueAttribute")}
    "inverse" "=" Field             -> Attribute {cons("InverseAttribute")}

    ID "." ID                       -> Field {cons("Field")}

    "Set" "<" ID ">"                -> Type {cons("SetType")}
    "List" "<" ID ">"               -> Type {cons("ListType")}

    ID                              -> Type {cons("Type")}