module to-yuml

imports include/Entity
imports include/Diagram

rules

// mappers

  declare-all = alltd(declare)

  declare : e@Entity(name, properties) -> e
  with <filter(declare-property(|name))>properties
  with rules (          
      EntityDeclaration : name -> e
  )

  declare : e@InheretingEntity(name, inherits, properties) -> e
  with <filter(declare-property(|e))>properties
  with rules (
      EntityDeclaration : name -> e
      InheritsFrom : name -> inherits
  )

  declare-property(|e) : p@ReferenceProperty(name, referenced, Attributes(attributes)) -> p
  with <filter(declare-attribute(|p))>attributes
  with rules (
      PropertyName : p -> name
      PropertyEntity : p -> e
  )

  declare-attribute(|p) : a@InverseAttribute(field) -> a
  with <debug(!"inverse: ")>field
  with rules (
      AttributeProperty : a -> p
      InverseProperty : field -> a
  )

// projectors

rules

  define : Class(name, Properties([])) ->
    DefinitionLine(Definition(EmptyClass(name), NoAttrs()))

  define : c@Class(name, _) ->
    DefinitionLine(Definition(c, NoAttrs()))

  relate(|lhs, rhs, lhs-attrs, rhs-attrs) : _ -> 
    RelationLine(Relation(LHS(lhs-definition, lhs-attrs), Line(), RHS(rhs-attrs, rhs-definition)))
    where lhs-definition := Definition(EmptyClass(lhs), NoAttrs())
    where rhs-definition := Definition(EmptyClass(rhs), NoAttrs())

  get-name : Entity(name, _) -> name

  handle-inherits : InheretingEntity(name, _, _) ->
    InheretanceLine(Definition(simple, NoAttrs()),
                    Definition(resolved, NoAttrs()))
    where from := <InheritsFrom>name
    with simple := EmptyClass(name)
    with from-name := <EntityDeclaration; get-name>from
    with resolved := EmptyClass(from-name)

  handle-referenced(|cname, lhs) : SetType(name) ->
    <relate(|cname, name, lhs-attrs, rhs-attrs)>
    with lhs-attrs := [Note(lhs)]
    with rhs-attrs := [RightDirectional(), AnyCardinality()]

  handle-inverse(|cname, lhs) : Type(name) -> [Note(p)]
    with field := Field(cname, lhs)
    where f := <InverseProperty>field
    with p := <AttributeProperty; PropertyName>f

  handle-inverse(|cname, lhs) : Type(name) -> []

  handle-referenced(|cname, lhs) : t@Type(name) ->
    <relate(|cname, name, lhs-attrs, rhs-attrs)>
    with lhs-attrs := [Note(lhs)]
    with rhs-attrs := [RightDirectional() | <handle-inverse(|cname, lhs)>t]

  handle-composite(|cname, lhs) : t@Type(name) ->
    <relate(|cname, name, lhs-attrs, rhs-attrs)>
    with lhs-attrs := [Note(lhs), Composition()]
    with rhs-attrs := [RightDirectional() | <handle-inverse(|cname, lhs)>t]

  handle-property(|cname) : CompositeProperty(name, referenced) ->
    <handle-composite(|cname, name)>referenced

  handle-property(|cname) : ReferenceProperty(name, referenced, NoAttributes()) ->
    <handle-referenced(|cname, name)>referenced

  handle-property(|cname) : ReferenceProperty(name, referenced, Attributes(attributes)) ->
    <handle-referenced(|cname, name)>referenced
    
  handle-properties : Entity(name, properties) ->
    <filter(handle-property(|name))>properties

rules

  to-yuml : Module(name, def) -> 
    Diagram(<map(to-yuml); concat>def)

  to-yuml : Entity(name, []) ->
     [<define>EmptyClass(name)]

  to-yuml : e@Entity(name, properties) ->
    [<define>Class(name, props) | <handle-properties>e]
    with props := Properties(<filter(to-yuml)>properties)

  to-yuml : e@InheretingEntity(name, inherits, properties) ->
    [<handle-inherits>e | <to-yuml>Entity(name, properties)]

  to-yuml : Property(name, type) ->
    Property(name)
