module to-yuml

imports include/Entity
imports include/Diagram

rules

  declare-all = alltd(declare)

  declare : e@Entity(name, properties) -> e
  with rules (
      EntityName : e -> name
      EntityDeclaration : name -> e
  )
  with <filter(declare-property(|name))>properties

  declare : e@InheretingEntity(name, inherits, properties) -> e
  with rules (
      EntityName : e -> name
      EntityDeclaration : name -> e
      InheritsFrom : name -> inherits
  )
  with <filter(declare-property(|e))>properties

  declare-property(|e) : p@ReferenceProperty(name, referenced, Attributes(attributes)) -> p
  with rules (
      EntityReferenced : e -> p
  )
  with rules (
      PropertyName : p -> name
      PropertyEntity : p -> e
  )
  with <filter(declare-attribute(|p))>attributes
  with try(<declare-referenced>referenced)

  declare-property(|e) : p@ReferenceProperty(name, referenced, _) -> p
  with rules (
      EntityReferenced : e -> p
  )
  with try(<declare-referenced>referenced)

  declare-referenced : t@Type(name) -> t
  with rules (
      EntityReferenced : name -> t
  )

  declare-attribute(|p) : a@InverseAttribute(field) -> a
  with e := <PropertyEntity>p
  with inverse := Field(e, <PropertyName>p)
  with rules (
      AttributeProperty : a -> p
      InversedProperty : inverse -> p
      InverseProperty : field -> a
      EntityReferenced : e -> a
  )

rules

  define : e@EmptyClass(name) ->
    DefinitionLine(Definition(e, NoAttrs()))
    where not(<EntityReferenced>name)

  define : Class(name, Properties([])) ->
    DefinitionLine(Definition(EmptyClass(name), NoAttrs()))
    where not(<EntityReferenced>name)

  define : c@Class(name, Properties([x|xs])) ->
    DefinitionLine(Definition(c, NoAttrs()))

  relate(|lhs, rhs, lhs-attrs, rhs-attrs) : _ -> 
    RelationLine(Relation(LHS(lhs-definition, lhs-attrs), Line(), RHS(rhs-attrs, rhs-definition)))
    where lhs-definition := Definition(EmptyClass(lhs), NoAttrs())
    where rhs-definition := Definition(EmptyClass(rhs), NoAttrs())

rules

  handle-inherits : InheretingEntity(name, _, _) ->
    InheretanceLine(Definition(simple, NoAttrs()),
                    Definition(resolved, NoAttrs()))
    where from := <InheritsFrom>name
    with simple := EmptyClass(name)
    with from-name := <EntityDeclaration; EntityName>from
    with resolved := EmptyClass(from-name)

  handle-referenced(|cname, lhs) : SetType(name) ->
    <relate(|cname, name, lhs-attrs, rhs-attrs)>
    with lhs-attrs := [Note(lhs)]
    with rhs-attrs := [RightDirectional(), AnyCardinality()]

  handle-inverse(|cname, lhs) : Type(name) -> [Note(p)]
    with field := Field(cname, lhs)
    where f := <InverseProperty>field
    with p := <AttributeProperty; PropertyName>f

  handle-inverse(|cname, lhs) : Type(name) -> []

  handle-referenced(|cname, lhs) : t@Type(name) ->
    <relate(|cname, name, lhs-attrs, rhs-attrs)>
    with lhs-attrs := [Note(lhs)]
    with rhs-attrs := [RightDirectional() | <handle-inverse(|cname, lhs)>t]

  handle-composite(|cname, lhs) : t@Type(name) ->
    <relate(|cname, name, lhs-attrs, rhs-attrs)>
    with lhs-attrs := [Note(lhs), Composition()]
    with rhs-attrs := [RightDirectional() | <handle-inverse(|cname, lhs)>t]

  inverse-handled(|cname) : name -> f
    with field := Field(cname, name)
    where f := <InversedProperty>field

  handle-property(|cname) : CompositeProperty(name, referenced) ->
    <handle-composite(|cname, name)>referenced
    where not(<inverse-handled(|cname)>name)

  handle-property(|cname) : ReferenceProperty(name, referenced, NoAttributes()) ->
    <handle-referenced(|cname, name)>referenced
    where not(<inverse-handled(|cname)>name)

  handle-property(|cname) : ReferenceProperty(name, referenced, Attributes(attributes)) ->
    <handle-referenced(|cname, name)>referenced
    where not(<inverse-handled(|cname)>name)
    
  handle-properties : Entity(name, properties) ->
    <filter(handle-property(|name))>properties

rules

  to-yuml : Module(name, def) -> 
    Diagram(<map(to-yuml); concat>def)

  to-yuml : Entity(name, []) -> [res]
    where res := <define>EmptyClass(name)

  to-yuml : Entity(name, []) -> []

  to-yuml : e@Entity(name, properties) ->
    [d | <handle-properties>e]
    with props := Properties(<filter(to-yuml)>properties)
    where d := <define>Class(name, props)

  to-yuml : e@Entity(name, properties) ->
    <handle-properties>e

  to-yuml : e@InheretingEntity(name, inherits, properties) ->
    [<handle-inherits>e | <to-yuml>Entity(name, properties)]

  to-yuml : Property(name, type) ->
    Property(name)
