
regular tree grammar
  start Start
  productions
    ListStarOfID1               -> ListPlusOfID1
    ListStarOfID1               -> <nil>()
    ListStarOfID1               -> <conc>(ListStarOfID1,ListStarOfID1)
    ListPlusOfID1               -> <conc>(ListStarOfID1,ListPlusOfID1)
    ListPlusOfID1               -> <conc>(ListPlusOfID1,ListStarOfID1)
    ListPlusOfID1               -> <conc>(ListPlusOfID1,ListPlusOfID1)
    ListPlusOfID1               -> <cons>(ID,ListStarOfID1)
    ListStarOfStream1           -> ListPlusOfStream1
    ListStarOfStream1           -> <nil>()
    ListStarOfStream1           -> <conc>(ListStarOfStream1,ListStarOfStream1)
    ListPlusOfStream1           -> <conc>(ListStarOfStream1,ListPlusOfStream1)
    ListPlusOfStream1           -> <conc>(ListPlusOfStream1,ListStarOfStream1)
    ListPlusOfStream1           -> <conc>(ListPlusOfStream1,ListPlusOfStream1)
    ListPlusOfStream1           -> <cons>(Stream,ListStarOfStream1)
    ListStarOfVariable1         -> ListPlusOfVariable1
    ListStarOfVariable1         -> <nil>()
    ListStarOfVariable1         -> <conc>(ListStarOfVariable1,ListStarOfVariable1)
    ListPlusOfVariable1         -> <conc>(ListStarOfVariable1,ListPlusOfVariable1)
    ListPlusOfVariable1         -> <conc>(ListPlusOfVariable1,ListStarOfVariable1)
    ListPlusOfVariable1         -> <conc>(ListPlusOfVariable1,ListPlusOfVariable1)
    ListPlusOfVariable1         -> <cons>(Variable,ListStarOfVariable1)
    OptFunctionArguments1       -> <some>(FunctionArguments)
    OptFunctionArguments1       -> <none>()
    OptApplicationTarget14      -> <some>(ApplicationTarget)
    OptApplicationTarget14      -> <none>()
    ListStarOfFunctionArgument1 -> ListPlusOfFunctionArgument1
    ListStarOfFunctionArgument1 -> <nil>()
    ListStarOfFunctionArgument1 -> <conc>(ListStarOfFunctionArgument1,ListStarOfFunctionArgument1)
    ListPlusOfFunctionArgument1 -> <conc>(ListStarOfFunctionArgument1,ListPlusOfFunctionArgument1)
    ListPlusOfFunctionArgument1 -> <conc>(ListPlusOfFunctionArgument1,ListStarOfFunctionArgument1)
    ListPlusOfFunctionArgument1 -> <conc>(ListPlusOfFunctionArgument1,ListPlusOfFunctionArgument1)
    ListPlusOfFunctionArgument1 -> <cons>(FunctionArgument,ListStarOfFunctionArgument1)
    ListStarOfStatement1        -> ListPlusOfStatement1
    ListStarOfStatement1        -> <nil>()
    ListStarOfStatement1        -> <conc>(ListStarOfStatement1,ListStarOfStatement1)
    ListPlusOfStatement1        -> <conc>(ListStarOfStatement1,ListPlusOfStatement1)
    ListPlusOfStatement1        -> <conc>(ListPlusOfStatement1,ListStarOfStatement1)
    ListPlusOfStatement1        -> <conc>(ListPlusOfStatement1,ListPlusOfStatement1)
    ListPlusOfStatement1        -> <cons>(Statement,ListStarOfStatement1)
    ListStarOfDeclaration1      -> ListPlusOfDeclaration1
    ListStarOfDeclaration1      -> <nil>()
    ListStarOfDeclaration1      -> <conc>(ListStarOfDeclaration1,ListStarOfDeclaration1)
    ListPlusOfDeclaration1      -> <conc>(ListStarOfDeclaration1,ListPlusOfDeclaration1)
    ListPlusOfDeclaration1      -> <conc>(ListPlusOfDeclaration1,ListStarOfDeclaration1)
    ListPlusOfDeclaration1      -> <conc>(ListPlusOfDeclaration1,ListPlusOfDeclaration1)
    ListPlusOfDeclaration1      -> <cons>(Declaration,ListStarOfDeclaration1)
    ListStarOfStringChar0       -> <string>
    ListPlusOfStringChar0       -> <string>
    OptLit0                     -> <string>
    Variable                    -> Variable(ID)
    Stream                      -> Stream(ID)
    Selection                   -> Selection(ListPlusOfID1)
    Selector                    -> Selector(Selection)
    Integer                     -> Integer(INT)
    String                      -> String(STRING)
    All                         -> All()
    StatementYay                -> Load
    StatementYay                -> FunctionApplication
    Value                       -> Integer
    Value                       -> String
    Value                       -> All
    Value                       -> LambdaFunction
    Value                       -> Selector
    Value                       -> Variable
    Statement                   -> Statement(StatementYay)
    StreamList                  -> StreamList(ListPlusOfStream1)
    VariableList                -> VariableList(ListPlusOfVariable1)
    FunctionApplication         -> FunctionApplication(StreamAssignment,LambdaFunction,FunctionType)
    LambdaFunction              -> LambdaFunction(PipeName,OptFunctionArguments1)
    ApplicationTarget           -> ApplicationTarget(StreamList)
    ExtractName                 -> ExtractName(ID)
    FunctionType                -> ExtractFunction()
    FunctionType                -> ApplyFunction(OptApplicationTarget14)
    FunctionArgument            -> FunctionArgument(Value,ID)
    FunctionArguments           -> FunctionArguments(ListPlusOfFunctionArgument1)
    Assignment                  -> Assignment(Variable)
    StreamAssignment            -> MultipleStreamAssignment(StreamList)
    StreamAssignment            -> SingleStreamAssignment(Stream)
    StreamAssignment            -> NoStreamAssignment()
    Output                      -> ExplicitOutput(StreamList)
    Output                      -> ImplicitOutput()
    Arguments                   -> Arguments(VariableList)
    Arguments                   -> NoArguments()
    Input                       -> ExplicitInput(StreamList)
    Input                       -> ImplicitInput()
    Input                       -> NoInput()
    Load                        -> Load(ID)
    PipeName                    -> PipeName(ID)
    Declaration                 -> Native(PipeName,Input,Arguments,Output)
    Declaration                 -> Pipe(PipeName,Input,Arguments,ListStarOfStatement1,Output)
    Start                       -> Start(ListStarOfDeclaration1)
    EOF                         -> <string>
    CommentChar                 -> <string>
    BackSlashChar               -> <string>
    StringChar                  -> <string>
    STRING                      -> <string>
    INT                         -> <string>
    ID                          -> <string>
