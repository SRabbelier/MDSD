module rename

imports
  libstratego-lib
  include/Pipes
  lib/editor-common.generated


rules
	rename-all= alltd(rename)
	
strategies
	rename: 
		Pipe(name, input, args, stat, output) -> Pipe(name, rn-input, args, rn-stat, rn-output)
		with {| RenameStream
			: rn-input 	:= <rename>input
			; rn-stat 	:= <rename-all>stat
			; rn-output := <rename-all>output
		|}
	
	rename:
		ExplicitInput(StreamList(list)) -> ExplicitInput(StreamList(newlist))
		with newlist := <map(rename-stream <+ id)>list
	
	rename:
		FunctionApplication(MultipleStreamAssignment(StreamList(list)), lambda, type)
			-> FunctionApplication(MultipleStreamAssignment(StreamList(newlist)), lambda', type')
		with type':= <rename-all>type
		with lambda' := <rename-all>lambda
		with newlist := <map(rename-stream <+ id)>list
		
	rename:
		Stream(x) -> Stream(y)
		// with <debug(!"RN ")>x
		where y:= <RenameStream>x
		
	rename-stream:
		init@Stream(x) -> Stream(y)
		where not(<RenameStream>x)
		with y:= x{<new>};
			rules(
				RenameStream: x -> y
				InitStream: y -> init
			)
		// where not(<RenameStream>x) // Only rename once

		
	//	Statement(FunctionApplication(Some(Stream(stream)), _, _)) -> <id>
	//	rules (
	//		
	//	)