%% Grammar for the Pipes language

module Pipes

imports Common

exports

  context-free start-symbols
    Module

  context-free syntax
  
    Declaration*                                    -> Module {cons("Module")}
    
    "load" ID                                                      -> Declaration {cons("Load")}
    "run" "pipe" PipeName                                          -> Declaration {cons("Run")}
    "define" "pipe" PipeName Input Arguments Statement* Output     -> Declaration {cons("Pipe")}
    "define" "native" PipeName Input Arguments Output              -> Declaration {cons("Native")}
    
    ID												-> PipeName {cons("PipeName")}


    % epsilon %                                     -> Input {cons("NoInput")}
    "input"                                         -> Input {cons("ImplicitInput")}
    "input" ":" StreamList                          -> Input {cons("ExplicitInput")}

    % epsilon %                                     -> Arguments {cons("NoArguments")}
    "arguments" ":" ArgumentList                    -> Arguments {cons("Arguments")}
    
    "output"                        				-> Output {cons("ImplicitOutput")}
    "output" ":" StreamList      					-> Output {cons("ExplicitOutput")}

	% epsilon %										-> StreamAssignment {cons("ImplicitStreamAssignment")}
    Stream "becomes"                                -> StreamAssignment {cons("SingleStreamAssignment")}
    StreamList "become"                             -> StreamAssignment {cons("MultipleStreamAssignment")}

    Variable "is"		                            -> Assignment {cons("Assignment")}

    "," "using" FunctionArgument+ ","               -> FunctionArguments {cons("FunctionArguments")}
    Value "as" ID                                   -> FunctionArgument {cons("FunctionArgument")}

    "applied" ApplicationTarget                     -> FunctionType {cons("ApplyFunction")}
    "extracted"                                     -> FunctionType {cons("ExtractFunction")}
    ID												-> ExtractName {cons("ExtractName")}

	% epsilon %										-> ApplicationTarget {cons("ImplicitApplicationTarget")}
    "to" StreamList  								-> ApplicationTarget {cons("ApplicationTarget")}

    PipeName FunctionArguments?                     -> LambdaFunction {cons("LambdaFunction")}
    "pipe" LambdaFunction							-> LambdaRef  {cons("LambdaRef")}

	"empty" Stream                                  -> Condition {cons("IsEmptyCondition")}

	"if" Condition                                  -> If {cons("If")}
	% epsilon %                                     -> Then {cons("NoThen")}
	"then" Statement*                               -> Then {cons("Then")}
	% epsilon %                                     -> Else {cons("NoElse")}
	"else" Statement*                               -> Else {cons("Else")}
	If Then Else "endif"                            -> Conditional {cons("Conditional")}

    StreamAssignment LambdaFunction FunctionType "."-> FunctionApplication {cons("FunctionApplication")}

	{Argument "and"}+                               -> ArgumentList {cons("ArgumentList")}
	Variable										-> Argument {cons("Argument")}
	Value "as" Variable								-> Argument {cons("DefaultedArgument")}
    {Stream "and"}+                               	-> StreamList {cons("StreamList")}

    %% class membership
    Variable                                        -> Value
    Selector                                        -> Value
    LambdaRef	                                    -> Value
    All                                             -> Value
    String                                          -> Value
    Integer                                         -> Value
    FunctionApplication                             -> Statement
    Conditional                                     -> Statement

    %% primitves
    "all"                                           -> All {cons("All")}
    STRING                                          -> String {cons("String")}
    INT                                             -> Integer {cons("Integer")} 
    "[" Selection "]"                               -> Selector {cons("Selector")}
    { ID "/"}+										-> Selection {cons("Selection")}
    "$" ID                                          -> Stream {cons("Stream")}
	ID                                              -> Variable {cons("Variable")}
	
	lexical syntax
		"and" 			-> Keyword
		"arguments" 	-> Keyword
		"become" 		-> Keyword
		"becomes" 		-> Keyword
		"define" 		-> Keyword
		"extracted"		-> Keyword
		"input" 		-> Keyword
		"load" 			-> Keyword
		"native" 		-> Keyword
		"output" 		-> Keyword
		"pipe" 			-> Keyword
		"to" 			-> Keyword
		"using"			-> Keyword
		
		Keyword -> ID {reject}
	lexical restrictions
		"and" "arguments" "become" "becomes" "define" "extracted" 
		"input" "load" "native" "output" "pipe" "to" "using" -/- [a-zA-Z0-9]