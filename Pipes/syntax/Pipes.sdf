%% Grammar for the Pipes language

module Pipes

imports Common

exports

  context-free start-symbols
    Start

  context-free syntax
  
    Declaration*                                    -> Start {cons("Start")}
    
    "pipe" PipeName Input Arguments Statement* Output     -> Declaration {cons("Pipe")}
    "native" PipeName Input Arguments Output              -> Declaration {cons("Native")}
    
    ID												-> PipeName {cons("PipeName")}

    "load" ID                                       -> Load {cons("Load")}

    % epsilon %                                     -> Input {cons("NoInput")}
    "input"                                         -> Input {cons("ImplicitInput")}
    "inputs" VariableList                           -> Input {cons("ExplicitInput")}

    % epsilon %                                     -> Arguments {cons("NoArguments")}
    "arguments" VariableList                        -> Arguments {cons("Arguments")}

    "output"                          				-> Output {cons("ImplicitOutput")}
    "outputs" VariableList							-> Output {cons("ExplicitOutput")}

    Variable "becomes"                              -> StreamAssignment {cons("StreamAssignment")}
    Variable "is"		                            -> Assignment {cons("Assignment")}

    "," "using" FunctionArgument+ ","               -> FunctionArguments {cons("FunctionArguments")}
    Value "as" ID                                   -> FunctionArgument {cons("FunctionArgument")}

    "applied" ApplicationTarget?                      -> FunctionType {cons("ApplyFunction")}
    "extracted"                                       -> FunctionType {cons("ExtractFunction")}
    ID												-> ExtractName {cons("ExtractName")}

    "to" VariableList								-> ApplicationTarget {cons("ApplicationTarget")}

    PipeName FunctionArguments?                     -> LambdaFunction {cons("LambdaFunction")}

    StreamAssignment? LambdaFunction FunctionType   -> FunctionApplication {cons("FunctionApplication")}

    {Variable "and"}+                               -> VariableList {cons("VariableList")}

	StatementYay "."								-> Statement {cons("Statement")}

    %% class membership
    Variable                                        -> Value
    Selector                                        -> Value
    LambdaFunction                                  -> Value
    All                                             -> Value
    String                                          -> Value
    Integer                                         -> Value
    FunctionApplication                             -> StatementYay
    Load                                            -> StatementYay

    %% primitves
    "all"                                           -> All {cons("All")}
    STRING                                          -> String {cons("String")}
    INT                                             -> Integer {cons("Integer")} 
    "[" Selection "]"                               -> Selector {cons("Selector")}
    { ID "/"}+										-> Selection {cons("Selection")}
    "$" ID                                          -> Variable {cons("Variable")}
