%% Grammar for the Pipes language
%% By default, based on an example "entities" syntax
module Pipes

imports Common

exports

  context-free start-symbols
    Start

  context-free syntax
  
    Declaration*                                    -> Start {cons("Start")}
    
    "pipe" ID Input Arguments Statement* Output     -> Declaration {cons("Pipe")}
    "native" ID Input Arguments Output              -> Declaration {cons("Native")}

    "load" ID                                       -> Load {cons("Load")}

    % epsilon %                                     -> Input {cons("NoInput")}
    "input"                                         -> Input {cons("ImplicitInput")}
    "inputs" VariableList                           -> Input {cons("ExplicitInput")}

    % epsilon %                                     -> Arguments {cons("NoArguments")}
    "arguments" VariableList                        -> Arguments {cons("Arguments")}

    % epsilon %                                     -> Output {cons("NoOutput")}
    "output" VariableList?                          -> Output {cons("Output")}

    Variable "is"                                   -> Assignment {cons("Assignment")}

    "with" FunctionArgument+                        -> FunctionArguments {cons("FunctionArguments")}
    ID "is" Value                                   -> FunctionArgument {cons("FunctionArgument")}
    ID "is"                                         -> FunctionArgument {recover}

    "apply" ID ("to" VariableList)?                 -> FunctionApplication {cons("FunctionApplication")}
    "extract" ID                                    -> FunctionApplication {cons("FunctionExtraction")}

    FunctionArguments? FunctionApplication          -> LambdaFunction {cons("LambdaFunction")}
    Assignment? LambdaFunction                      -> Function {cons("Function")}

    {Variable "and"}+                               -> VariableList {cons("VariableList")}

    %% class membership
    Variable                                        -> Value
    Selector                                        -> Value
    LambdaFunction                                  -> Value
    All                                             -> Value
    String                                          -> Value
    Integer                                         -> Value
    Function                                        -> Statement
    Load                                            -> Statement

    %% primitves
    "all"                                           -> All {cons("All")}
    STRING                                          -> String {cons("String")}
    INT                                             -> Integer {cons("Integer")} 
    "[" ID "]"                                      -> Selector {cons("Selector")} %% TODO
    "$" ID                                          -> Variable {cons("Variable")}
